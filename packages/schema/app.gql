scalar DateTime

# client app
type Client{
  # client id
  id: ID!
  name: String!
  # callback url
  url: String!
  # yours
  self: Boolean
  # create date
  date: DateTime!
  # update date
  update: DateTime!
}

# topic edit history
type History{
  # history id
  id: ID!
  # target topic
  topic: TopicNormal!
  # topic title
  title: String!
  # topic tags
  tags: [String!]!
  # topic text
  text: String!
  # history create date
  date: DateTime!
  # hash(user,date,topic)
  hash: String!
  # yours
  self:Boolean
}

# notice message
type Msg{
  # msg id
  id: ID!
  # is private msg
  priv: Boolean
  # msg text
  text: String!
  # create date
  date: DateTime!
}

# user profile
type Profile{
  # profile id
  id: ID!
  # yours
  self: Boolean
  # profile name
  name: String!
  # profile text
  text: String!
  # create date
  date: DateTime!
  # update
  update: DateTime!
  # screen name
  sn: String!
}

# res vote flag
enum VoteFlag{
  # up voted
  uv
  # down voted
  dv
  # not voted
  not
}

# res delete flag
enum ResDeleteFlag{
  # by user
  self
  # by manager
  freeze
}

interface Res{
  # res id
  id: ID!
  # posted topic
  topic: Topic!
  # post date
  date: DateTime!
  # yours
  self: Boolean
  # up vote count
  uv: Int!
  # down vote count
  dv: Int!
  # hash(user,topic,date)
  hash: String!
  # reply count
  replyCount: Int!
  # you vote flag
  voteFlag: VoteFlag
}

# normal res
type ResNormal implements Res{
  # res id
  id: ID!
  # posted topic
  topic: Topic!
  # post date
  date: DateTime!
  # yours
  self: Boolean
  # up vote count
  uv: Int!
  # down vote count
  dv: Int!
  # hash(user,topic,date)
  hash: String!
  # reply count
  replyCount: Int!
  # you vote flag
  voteFlag: VoteFlag

  # res name
  name: String
  # res text
  text: String!
  # reply res
  reply: Res
  # res profile
  profile: Profile
  # is yours reply
  isReply: Boolean
}

# post history notice res
type ResHistory implements Res{
  # res id
  id: ID!
  # post topic
  topic: Topic!
  # post date
  date: DateTime!
  # yours
  self: Boolean
  # up vote count
  uv: Int!
  # down vote count
  dv: Int!
  # hash(date,user,topic)
  hash: String!
  # was reply count
  replyCount: Int!
  # you vote flag
  voteFlag: VoteFlag

  # target history
  history: History!
}

# first res in One/Fork Topic
type ResTopic implements Res{
  # res id
  id: ID!
  # post topic
  topic: Topic!
  # post date
  date: DateTime!
  # yours
  self: Boolean
  # up vote count
  uv: Int!
  # down vote count
  dv: Int!
  # hash(user,topic,date)
  hash: String!
  # reply count
  replyCount: Int!
  # you vote flag
  voteFlag: VoteFlag
}

# new fork topic notice res
type ResFork implements Res{
  # res id
  id: ID!
  # post topic
  topic: Topic!
  # post date
  date: DateTime!
  # yours
  self: Boolean
  # up vote count
  uv: Int!
  # down vote count
  dv: Int!
  # hash(user,topic,date)
  hash: String!
  # reply count
  replyCount: Int!
  # you vote flag
  voteFlag: VoteFlag

  # target fork topic
  fork: TopicFork!
}

# deteled res
type ResDelete implements Res{
  # res id
  id: ID!
  # post topic
  topic: Topic!
  # post date
  date: DateTime!
  # yours
  self: Boolean
  # up vote count
  uv: Int!
  # down vote count
  dv: Int!
  # hash(user,topic,date)
  hash: String!
  # reply count
  replyCount: Int!
  # you vote flag
  voteFlag: VoteFlag

  # delete flag
  flag: ResDeleteFlag!
}

type TokenReq{
  token: ID!
  key: String!
}

interface Token{
  id: ID!
  key: String!
  date: DateTime!
}

type TokenMaster implements Token{
  id: ID!
  key: String!
  date: DateTime!
}

type TokenGeneral implements Token{
  id: ID!
  key: String!
  date: DateTime!

  client:Client!
}

interface Topic{
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!
}

interface TopicSearch{
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}

type TopicNormal implements Topic&TopicSearch{
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}

type TopicOne implements Topic&TopicSearch{
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}

type TopicFork implements Topic{
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  parent:TopicNormal!
}

type Storage{
  key:String!
  value:String!
}

input DateQuery{
  date:DateTime!
  type:DateType!
}

enum DateType{
  gt
  gte
  lt
  lte
}

type User{
  id:ID!
  sn:String!
}

type Tags{
  name:String!
  count:Int!
}

input ClientQuery{
  id:[ID!]
  self:Boolean
}

input HistoryQuery{
  id:[ID!]
  topic:[ID!]
  date:DateQuery
}

input MsgQuery{
  id:[ID!]
  date:DateQuery
}

input ProfileQuery{
  id:[ID!]
  self:Boolean
}

input ResQuery{
  id:[ID!]
  topic:ID
  notice:Boolean
  hash:String
  reply:ID
  profile:ID
  self:Boolean
  text:String
  date:DateQuery
}

input AuthUser{
  id:String
  sn:String
  pass:String!
}

input StorageQuery{
  key:[String!]
}

input TopicQuery{
  id:[ID!]
  title:String
  tags:[String!]
  activeOnly:Boolean
  parent:ID
}

type Query{
  clients(query:ClientQuery!):[Client!]!
  histories(query:HistoryQuery!,limit:Int!=100):[History!]!
  msgs(query:MsgQuery!,limit:Int!=100):[Msg!]!
  profiles(query:ProfileQuery!):[Profile!]!
  reses(query:ResQuery!,limit:Int!=100):[Res!]!
  storages(query:StorageQuery!):[Storage!]!
  token:Token!
  tokens:[Token!]!
  topics(query:TopicQuery!,skip:Int!=0,limit:Int!=100):[Topic!]!
  topicTags(limit:Int!=100):[Tags!]!
  userID(sn:String!):ID!
  userSN(id:ID!):String!
  user:User!
}

enum VoteType{
  uv
  dv
  cv
}

type UpdateUserResponse{
  user:User!
  token:TokenMaster!
}

type CreateUserResponse{
  user:User!
  token:TokenMaster!
}

type CreateTokenGeneralResponse{
  token:TokenGeneral!
  req:TokenReq!
}

enum CharType{
  lc
  uc
  d
  ub
  hy
  hira
  kana
  han
}

type ValidateData{
  char:[CharType]
  min:Int
  max:Int
}

type CreateClientResponseError{
  name:ValidateData!
  url:Boolean!
}

union CreateClientResponse=Client|CreateClientResponseError

type Mutation {
  createClient(name:String!,url:String!):Client!
  updateClient(id:ID!,name:String,url:String):Client!
  createProfile(name:String!,text:String!,sn:String!):Profile!
  updateProfile(id:ID!,name:String,text:String,sn:String):Profile!
  createRes(topic:String!,name:String,text:String!,reply:String,profile:String,age:Boolean!):ResNormal!
  voteRes(res:ID!,type:VoteType!):Res!
  delRes(res:ID!):ResDelete!
  setStorage(key:String!,value:String!):Storage!
  delStorage(key:String!):Boolean
  delTokenClient(client:ID!):Boolean
  createTokenGeneral(client:ID!):CreateTokenGeneralResponse!
  createTokenReq:TokenReq!
  createTokenMaster(auth:AuthUser!):TokenMaster!
  authTokenReq(id:ID!,key:String!):TokenGeneral!
  createTopicNormal(title:String!,tags:[String!]!,text:String!):TopicNormal!
  createTopicOne(title:String!,tags:[String!]!,text:String!):TopicOne!
  createTopicFork(title:String!,parent:ID!):TopicFork!
  updateTopic(id:ID!,title:String,tags:[String!],text:String):TopicNormal!
  createUser(sn:String!,pass:String!,recaptcha:String!):CreateUserResponse!
  updateUser(sn:String,pass:String,auth:AuthUser!):UpdateUserResponse!
}

type ResSubscript{
  res:Res!
  count:Int!
}

type Subscription {
  resAdded(topic:ID!):ResSubscript!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @db.VarChar(64)
  name      String   @db.Text
  url       String   @db.Text
  userId    String   @map("user_id") @db.VarChar(64)
  createdAt DateTime @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @map("updated_at") @db.Timestamptz(3)

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("clients")
}

model Profile {
  id          String   @id @db.VarChar(64)
  userId      String   @db.VarChar(64)
  name        String   @db.Text
  description String   @db.Text
  createdAt   DateTime @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime @map("updated_at") @db.Timestamptz(3)
  screenName  String   @unique @map("screen_name") @db.Text

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("profiles")
}

enum TokenType {
  GENERAL  @map(name: "general")
  MASTER   @map(name: "master")

  @@map("token_type")
}

model Token {
  id        String    @id @db.VarChar(64)
  key       String    @db.Text
  type      TokenType
  userId    String    @db.VarChar(64)
  createdAt DateTime  @map("created_at") @db.Timestamptz(3)

  // normal
  clientId String?    @db.VarChar(64)
  reqs     TokenReq[]

  @@index([type])
  @@index([userId])
  @@index([createdAt])
  @@index([clientId])
  @@map("tokens")
}

model TokenReq {
  key     String   @id @db.Text
  expires DateTime @db.Timestamptz(3)
  active  Boolean
  token   Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tokenId String   @db.VarChar(64)

  @@map("tokenReqs")
}

model User {
  id                    String   @id @db.VarChar(64)
  screenName            String   @unique @map("screen_name") @db.Text
  encryptedPassword     String   @map("encrypted_password") @db.Text
  lv                    Int      @db.Integer
  resLastCreatedAt      DateTime @map("res_last_created_at") @db.Timestamptz(3)
  countCreatedResM10    Int      @map("count_created_res_m10") @db.Integer
  countCreatedResM30    Int      @map("count_created_res_m30") @db.Integer
  countCreatedResH1     Int      @map("count_created_res_h1") @db.Integer
  countCreatedResH6     Int      @map("count_created_res_h6") @db.Integer
  countCreatedResH12    Int      @map("count_created_res_h12") @db.Integer
  countCreatedResD1     Int      @map("count_created_res_d1") @db.Integer
  topicLastCreatedAt    DateTime @map("topic_last_created_at") @db.Timestamptz(3)
  createdAt             DateTime @map("created_at") @db.Timestamptz(3)
  point                 Int      @db.Integer
  oneTopicLastCreatedAt DateTime @map("one_topic_last_created_at") @db.Timestamptz(3)

  @@index([countCreatedResM10])
  @@index([countCreatedResM30])
  @@index([countCreatedResH1])
  @@index([countCreatedResH6])
  @@index([countCreatedResH12])
  @@index([countCreatedResD1])
  @@index([point])
  @@index([createdAt])
  @@map("users")
}

model Storage {
  clientId String @map("client_id") @db.VarChar(64) // 空文字ならnull
  userId   String @map("user_id") @db.VarChar(64)
  key      String @db.Text
  value    String @db.Text

  @@id([clientId, userId, key])
  @@map("storages")
}

enum ResType {
  NORMAL   @map(name: "normal")
  HISTORY  @map(name: "history")
  TOPIC    @map(name: "topic")
  FORK     @map(name: "fork")

  @@map("res_type")
}

enum ResDeleteFlag {
  ACTIVE  @map(name: "active")
  SELF    @map(name: "self")
  FREEZE  @map(name: "freeze")

  @@map("res_delete_flag")
}

model Res {
  id        String    @id @db.VarChar(64)
  type      ResType
  topicId   String    @map("topic_id") @db.VarChar(64)
  createdAt DateTime  @map("created_at") @db.Timestamptz(3)
  userId    String    @map("user_id") @db.VarChar(64)
  votes     ResVote[]
  lv        Int       @db.Integer
  hash      String    @db.VarChar(64)

  // normal
  name       String?        @db.Text
  content    String?        @db.Text
  replyId    String?        @map("reply_id") @db.VarChar(64)
  reply      Res?           @relation("resReply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replieds   Res[]          @relation("resReply")
  deleteFlag ResDeleteFlag? @map("delete_flag")
  profileId  String?        @map("profile_id") @db.VarChar(64)
  age        Boolean?

  // history
  historyId String? @map("history_id") @db.VarChar(64)

  // topic

  // fork
  forkId String? @map("fork_id") @db.VarChar(64)

  // TODO: name, textのindex
  @@index([type])
  @@index([topicId])
  @@index([createdAt])
  @@index([userId])
  @@index([lv])
  @@index([hash])
  @@index([replyId])
  @@index([deleteFlag])
  @@index([profileId])
  @@index([age])
  @@index([historyId])
  @@index([forkId])
  @@map("reses")
}

model ResVote {
  resId     String   @map("res_id") @db.VarChar(64)
  res       Res      @relation(fields: [resId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String   @map("user_id") @db.VarChar(64)
  createdAt DateTime @map("created_at") @db.Timestamptz(3)
  vote      Int      @db.Integer

  @@id([resId, userId])
  @@index([userId])
  @@index([createdAt])
  @@index([vote])
  @@map("res_votes")
}

model History {
  id          String   @id @db.VarChar(64)
  topicId     String   @map("topic_id") @db.VarChar(64)
  tags        String[] @db.Text
  title       String   @db.Text
  description String   @db.Text
  createdAt   DateTime @map("created_at") @db.Timestamptz(3)
  hash        String   @db.VarChar(64)
  userId      String   @map("user_id") @db.VarChar(64)

  // TODO: titleとtextのindex

  @@index([topicId])
  @@index([createdAt])
  @@index([hash])
  @@index([userId])
  @@map("histories")
}

model Msg {
  id         String   @id @db.VarChar(64)
  receiverId String?  @map("receiver_id") @db.VarChar(64)
  content    String   @db.Text
  createdAt  DateTime @map("created_at") @db.Timestamptz(3)

  // TODO: textのindex
  @@index([receiverId])
  @@index([createdAt])
  @@map("msgs")
}

enum TopicType {
  NORMAL  @map(name: "normal")
  ONE     @map(name: "one")
  FORK    @map(name: "fork")
}

model Topic {
  id           String    @id @db.VarChar(64)
  type         TopicType
  title        String    @db.Text
  updatedAt    DateTime  @map("updated_at") @db.Timestamptz(3)
  createdAt    DateTime  @map("created_at") @db.Timestamptz(3)
  ageUpdatedAt DateTime  @map("age_updated_at") @db.Timestamptz(3)
  active       Boolean   @map("active")

  // search
  tags        String[] @db.Text
  description String?  @db.Text

  // normal
  // one
  //fork
  parentId String? @map("parent_id") @db.VarChar(64)

  // TODO: text, titleのindex
  @@index([type])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([ageUpdatedAt])
  @@index([active])
  @@index([parentId])
  @@map("topics")
}

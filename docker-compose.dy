#!/usr/bin/env node
"use strict";

function get_env() {
  const mode = process.env["DCDY_MODE"];
  if (mode !== "prod" && mode !== "dev" && mode !== "test") {
    throw new Error();
  }

  const debugTools = Boolean(process.env["DCDY_DEBUG_TOOLS"]);
  const serverImage = process.env["DCDY_SERVER_IMAGE"] || null;
  const clientImage = process.env["DCDY_CLIENT_IMAGE"] || null;
  const esImage = process.env["DCDY_ES_IMAGE"] || null;

  return { mode, serverImage, clientImage, esImage, debugTools };
}

const ports = {
  server: 8080,
  mongoExpress: 8081,
  esHead: 9100,
  camo: 4181,
  client: 3000
};

function match_mode(env, map) {
  for (let key of Object.keys(map)) {
    if (key.split(",").includes(env.mode)) {
      return map[key];
    }
  }
  throw new Error();
}

const compose = env => ({
  version: "3.4",
  services: compose_services(env)
});

const compose_services = env => ({
  server: compose_services_server(env),
  mongo: compose_services_mongo(env),
  "mongo-express": match_mode(env, {
    dev: env.debugTools ? compose_services_mongo_express(env) : undefined,
    [["prod", "test"]]: undefined
  }),
  es: compose_services_es(env),
  "es-head": match_mode(env, {
    dev: env.debugTools ? compose_services_es_head(env) : undefined,
    [["prod", "test"]]: undefined
  }),
  redis: compose_services_redis(env),
  camo: compose_services_camo(env),
  client: compose_services_client(env)
});

const compose_services_server = env => ({
  build: match_mode(env, {
    dev: {
      context: "./server",
      dockerfile: "dev.Dockerfile"
    },
    test: "./server",
    prod: env.serverImage ? undefined : "./server"
  }),
  image: match_mode(env, {
    prod: env.serverImage || undefined,
    [["dev", "test"]]: undefined
  }),
  restart: "always",
  environment: {
    SERVER_PORT: "8080",
    MONGO_HOST: "mongo:27017",
    ES_HOST: "es:9200",
    REDIS_HOST: "redis:6379",
    SAVE_DIR: "../../"
  },
  env_file: match_mode(env, {
    [["dev", "prod"]]: ".env",
    test: ".env.sample"
  }),
  ports: match_mode(env, {
    [["dev", "prod"]]: [`${ports.server}:8080`],
    test: undefined
  }),
  depends_on: ["mongo", "es", "redis"],
  volumes: match_mode(env, {
    prod: [
      "./data/app/logs:/home/app/.anontown/logs",
      "./data/app/data:/home/app/.anontown/data"
    ],
    dev: [
      "./server:/home/app/.anontown",
      "./data/app/logs:/home/app/.anontown/logs",
      "./data/app/data:/home/app/.anontown/data"
    ],
    test: undefined
  })
});

const compose_services_mongo = env => ({
  restart: "always",
  image: "mongo:3.6.3",
  volumes: match_mode(env, {
    [["prod", "dev"]]: ["./data/db:/data/db"],
    test: undefined
  })
});

const compose_services_mongo_express = env => ({
  restart: "always",
  image: "mongo-express:0.40.0",
  ports: [`${ports.mongoExpress}:8081`],
  depends_on: ["mongo"]
});

const compose_services_es = env => ({
  build: "es",
  build: match_mode(env, {
    [["dev", "test"]]: "es",
    prod: env.esImage ? undefined : "es"
  }),
  image: match_mode(env, {
    prod: env.esImage || undefined,
    [["dev", "test"]]: undefined
  }),
  restart: "always",
  environment: { ES_JAVA_OPTS: "-Xms512m -Xmx512m" },
  ulimits: { nofile: { soft: 65536, hard: 65536 } },
  volumes: match_mode(env, {
    [["prod", "dev"]]: ["./data/es:/usr/share/elasticsearch/data"],
    test: undefined
  })
});

const compose_services_es_head = env => ({
  image: "mobz/elasticsearch-head:5",
  restart: "always",
  ports: [`${ports.esHead}:9100`],
  depends_on: ["es"]
});

const compose_services_redis = env => ({
  restart: "always",
  image: "redis:5.0.4",
  volumes: match_mode(env, {
    [["prod", "dev"]]: ["./data/redis:/data"],
    test: undefined
  }),
  command: "redis-server --appendonly yes"
});

const compose_services_camo = env => ({
  restart: "always",
  image: "kgtkr/camo:e59df56a01c023850962fac16905269d264fba50",
  environment: { PORT: "4181" },
  ports: [`${ports.camo}:4181`]
});

const compose_services_client = env => ({
  build: match_mode(env, {
    dev: {
      context: "./client",
      dockerfile: "dev.Dockerfile"
    },
    test: "./client",
    prod: env.clientImage ? undefined : "./client"
  }),
  image: match_mode(env, {
    prod: env.clientImage || undefined,
    [["dev", "test"]]: undefined
  }),
  restart: "always",
  environment: {
    PORT: "3000",
    ...match_mode(env, {
      prod: {
        RECAPTCHA_SITE_KET: "6LdoFBQUAAAAACc3lhPhbkEANEAHsmNd6UDN2vKo",
        CLIENT_ORIGIN: "https://anontown.com",
        CAMO_ORIGIN: "https://camo.anontown.com",
        CAMO_KEY: "0x24FEEDFACEDEADBEEFCAFE",
        API_ORIGIN: "https://api.anontown.com",
        SOCKET_ORIGIN: "wss://api.anontown.com",
        IMGUR_CLIENT_ID: "042fd78266ccaaf",
        GA: "UA-108693999-1"
      },
      dev: {
        RECAPTCHA_SITE_KET: "6LdoFBQUAAAAACc3lhPhbkEANEAHsmNd6UDN2vKo",
        CLIENT_ORIGIN: `http://localhost:${ports.client}`,
        CAMO_ORIGIN: `https://localhost:${ports.camo}`,
        CAMO_KEY: "0x24FEEDFACEDEADBEEFCAFE",
        API_ORIGIN: `http://localhost:${ports.server}`,
        SOCKET_ORIGIN: `ws://localhost:${ports.server}`,
        IMGUR_CLIENT_ID: "042fd78266ccaaf",
        GA: ""
      },
      test: {}
    })
  },
  ports: match_mode(env, {
    [["dev", "prod"]]: [`${ports.client}:3000`],
    test: undefined
  }),
  volumes: match_mode(env, {
    prod: [],
    dev: ["./client:/home/app/.anontown"],
    test: undefined
  })
});

console.log(JSON.stringify(compose(get_env())));
